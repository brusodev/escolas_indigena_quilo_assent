#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Verifica√ß√£o Completa do Sistema das 91 Diretorias
Script final para validar todas as integra√ß√µes
"""

import sqlite3
import json
import requests
import os
from datetime import datetime

def verificar_banco_consolidado():
    """Verifica o banco de dados consolidado"""
    print("üîç VERIFICANDO BANCO DE DADOS CONSOLIDADO...")
    
    banco_path = "banco_completo_91_diretorias.db"
    if not os.path.exists(banco_path):
        print("‚ùå Banco consolidado n√£o encontrado!")
        return False
    
    conn = sqlite3.connect(banco_path)
    cursor = conn.cursor()
    
    # Verificar diretorias
    cursor.execute("SELECT COUNT(*) FROM diretorias")
    num_diretorias = cursor.fetchone()[0]
    print(f"‚úÖ Diretorias no banco: {num_diretorias}")
    
    # Verificar escolas
    cursor.execute("SELECT COUNT(*) FROM escolas")
    num_escolas = cursor.fetchone()[0]
    print(f"‚úÖ Escolas no banco: {num_escolas}")
    
    # Verificar tipos de escola
    cursor.execute("SELECT COUNT(*) FROM tipos_escola")
    num_tipos = cursor.fetchone()[0]
    print(f"‚úÖ Tipos de escola: {num_tipos}")
    
    # Verificar siglas oficiais
    cursor.execute("SELECT COUNT(*) FROM diretorias WHERE sigla_oficial IS NOT NULL")
    num_siglas = cursor.fetchone()[0]
    print(f"‚úÖ Diretorias com siglas oficiais: {num_siglas}")
    
    # Verificar algumas diretorias espec√≠ficas
    cursor.execute("SELECT nome, sigla_oficial FROM diretorias WHERE sigla_oficial IS NOT NULL LIMIT 5")
    amostras = cursor.fetchall()
    print("\nüìã Amostra de diretorias com siglas:")
    for nome, sigla in amostras:
        print(f"   ‚Ä¢ {nome} - {sigla}")
    
    conn.close()
    
    return num_diretorias == 91 and num_escolas > 5000 and num_tipos == 10

def verificar_banco_flask():
    """Verifica o banco no sistema Flask"""
    print("\nüîç VERIFICANDO BANCO NO FLASK...")
    
    flask_banco = "flask_sistema/instance/banco_91_diretorias.db"
    if not os.path.exists(flask_banco):
        print("‚ùå Banco Flask n√£o encontrado!")
        return False
    
    conn = sqlite3.connect(flask_banco)
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM diretorias")
    num_diretorias = cursor.fetchone()[0]
    print(f"‚úÖ Diretorias no Flask: {num_diretorias}")
    
    cursor.execute("SELECT COUNT(*) FROM escolas")
    num_escolas = cursor.fetchone()[0]
    print(f"‚úÖ Escolas no Flask: {num_escolas}")
    
    conn.close()
    
    return num_diretorias == 91

def testar_api_flask():
    """Testa a API do Flask"""
    print("\nüîç TESTANDO API FLASK...")
    
    try:
        # Testar endpoint das diretorias
        response = requests.get("http://127.0.0.1:5000/api/diretorias-91", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API respondendo: {len(data['diretorias'])} diretorias")
            
            # Verificar se tem siglas oficiais
            com_siglas = sum(1 for d in data['diretorias'] if d.get('sigla_oficial'))
            print(f"‚úÖ Diretorias com siglas oficiais na API: {com_siglas}")
            
            return len(data['diretorias']) == 91
        else:
            print(f"‚ùå API erro: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
        return False

def verificar_arquivos_consolidacao():
    """Verifica os arquivos de consolida√ß√£o"""
    print("\nüîç VERIFICANDO ARQUIVOS DE CONSOLIDA√á√ÉO...")
    
    arquivos = [
        "dados_escolas_consolidados_91.json",
        "dados_diretorias_consolidados_91.json",
        "dados_tipos_escola_consolidados.json",
        "estatisticas_consolidacao_91.json"
    ]
    
    todos_existem = True
    for arquivo in arquivos:
        if os.path.exists(arquivo):
            print(f"‚úÖ {arquivo} encontrado")
            
            # Verificar conte√∫do de exemplo
            if arquivo.endswith('.json'):
                with open(arquivo, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        print(f"   ‚Üí {len(data)} registros")
                    elif isinstance(data, dict):
                        print(f"   ‚Üí {len(data.keys())} chaves")
        else:
            print(f"‚ùå {arquivo} n√£o encontrado")
            todos_existem = False
    
    return todos_existem

def gerar_relatorio_final():
    """Gera relat√≥rio final do sistema"""
    print("\nüìä RELAT√ìRIO FINAL DO SISTEMA")
    print("=" * 50)
    
    # Verifica√ß√µes
    banco_ok = verificar_banco_consolidado()
    flask_ok = verificar_banco_flask()
    api_ok = testar_api_flask()
    arquivos_ok = verificar_arquivos_consolidacao()
    
    print("\nüéØ RESUMO DAS VERIFICA√á√ïES:")
    print(f"‚úÖ Banco consolidado: {'OK' if banco_ok else 'ERRO'}")
    print(f"‚úÖ Banco Flask: {'OK' if flask_ok else 'ERRO'}")
    print(f"‚úÖ API funcionando: {'OK' if api_ok else 'ERRO'}")
    print(f"‚úÖ Arquivos consolidados: {'OK' if arquivos_ok else 'ERRO'}")
    
    if all([banco_ok, flask_ok, api_ok, arquivos_ok]):
        print("\nüéâ SISTEMA COMPLETAMENTE INTEGRADO!")
        print("‚úÖ 91 diretorias com siglas oficiais")
        print("‚úÖ Mais de 5.000 escolas consolidadas")
        print("‚úÖ 10 tipos de escola mapeados")
        print("‚úÖ Flask funcionando com dados atualizados")
        print("‚úÖ API respondendo corretamente")
        
        print("\nüîó ACESSO AO SISTEMA:")
        print("üìä Dashboard: http://127.0.0.1:5000/91-diretorias")
        print("üîå API: http://127.0.0.1:5000/api/diretorias-91")
        
        # Salvar status
        status = {
            "timestamp": datetime.now().isoformat(),
            "status": "COMPLETO",
            "diretorias": 91,
            "escolas": "5000+",
            "tipos_escola": 10,
            "flask": "funcionando",
            "api": "funcionando",
            "siglas_oficiais": "implementadas"
        }
        
        with open("status_sistema_91_diretorias.json", "w", encoding="utf-8") as f:
            json.dump(status, f, indent=2, ensure_ascii=False)
        
        print("üíæ Status salvo em: status_sistema_91_diretorias.json")
        
    else:
        print("\n‚ö†Ô∏è SISTEMA COM PROBLEMAS - verifique os erros acima")
    
    return all([banco_ok, flask_ok, api_ok, arquivos_ok])

if __name__ == "__main__":
    print("üöÄ VERIFICA√á√ÉO COMPLETA DO SISTEMA DAS 91 DIRETORIAS")
    print("=" * 60)
    
    sucesso = gerar_relatorio_final()
    
    if sucesso:
        print("\n‚úÖ VERIFICA√á√ÉO CONCLU√çDA COM SUCESSO!")
    else:
        print("\n‚ùå VERIFICA√á√ÉO ENCONTROU PROBLEMAS!")
    
    print("\n" + "=" * 60)
