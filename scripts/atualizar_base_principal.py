#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para atualizar a base principal de dados de ve√≠culos
com os dados corretos validados.
"""

import json
import shutil
from datetime import datetime
import os


def criar_backup():
    """Cria backup do arquivo principal antes da atualiza√ß√£o."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    arquivo_original = "dados/json/dados_veiculos_atualizados.json"
    arquivo_backup = f"dados/json/backup_dados_veiculos_atualizados_{timestamp}.json"

    if os.path.exists(arquivo_original):
        shutil.copy2(arquivo_original, arquivo_backup)
        print(f"   üìÑ Backup criado: {arquivo_backup}")
        return True
    return False


def atualizar_base_principal():
    """Atualiza a base principal com os dados corretos."""

    print("üîÑ ATUALIZANDO BASE PRINCIPAL DE VE√çCULOS")
    print("=" * 50)

    # Criar backup
    print("1Ô∏è‚É£ Criando backup da base atual...")
    backup_criado = criar_backup()

    if not backup_criado:
        print("   ‚ö†Ô∏è  Arquivo principal n√£o encontrado, criando novo...")

    # Carregar dados corretos
    print("\n2Ô∏è‚É£ Carregando dados corretos...")
    arquivo_correto = "dados/json/dados_veiculos_originais_corretos.json"

    try:
        with open(arquivo_correto, "r", encoding="utf-8") as f:
            dados_corretos = json.load(f)
        print(f"   ‚úÖ Dados corretos carregados: {len(dados_corretos)} diretorias")
    except FileNotFoundError:
        print(f"   ‚ùå Arquivo {arquivo_correto} n√£o encontrado!")
        return False

    # Atualizar arquivo principal
    print("\n3Ô∏è‚É£ Atualizando arquivo principal...")
    arquivo_principal = "dados/json/dados_veiculos_atualizados.json"

    try:
        with open(arquivo_principal, "w", encoding="utf-8") as f:
            json.dump(dados_corretos, f, indent=2, ensure_ascii=False)
        print(f"   ‚úÖ Base principal atualizada: {arquivo_principal}")
    except Exception as e:
        print(f"   ‚ùå Erro ao atualizar base principal: {e}")
        return False

    # Verifica√ß√£o final
    print("\n4Ô∏è‚É£ Verificando atualiza√ß√£o...")
    try:
        with open(arquivo_principal, "r", encoding="utf-8") as f:
            dados_verificacao = json.load(f)

        # Contar ve√≠culos nas diretorias relevantes
        diretorias_relevantes = [
            "ADAMANTINA",
            "AMERICANA",
            "ARA√áATUBA",
            "ARARAQUARA",
            "BAURU",
            "BOTUCATU",
            "BRAGAN√áA PAULISTA",
            "CARAPICU√çBA",
            "DIADEMA",
            "FERNAND√ìPOLIS",
            "GUARULHOS NORTE",
            "GUARULHOS SUL",
            "ITAPECERICA DA SERRA",
            "JALES",
            "JOS√â BONIF√ÅCIO",
            "MAR√çLIA",
            "OSASCO",
            "PRESIDENTE PRUDENTE",
            "TUP√É",
        ]

        total_veiculos_relevantes = 0
        total_s1 = 0
        total_s2 = 0
        total_s2_4x4 = 0

        for diretoria in diretorias_relevantes:
            if diretoria in dados_verificacao:
                dados_dir = dados_verificacao[diretoria]
                total_veiculos_relevantes += dados_dir.get("total", 0)
                total_s1 += dados_dir.get("s1", 0)
                total_s2 += dados_dir.get("s2", 0)
                total_s2_4x4 += dados_dir.get("s2_4x4", 0)

        print(f"   ‚úÖ Diretorias relevantes: {len(diretorias_relevantes)}")
        print(
            f"   ‚úÖ Total de ve√≠culos nas diretorias relevantes: {total_veiculos_relevantes}"
        )
        print(
            f"   ‚úÖ Distribui√ß√£o: S1={total_s1}, S2={total_s2}, S2_4x4={total_s2_4x4}"
        )

        # Verificar se os n√∫meros est√£o corretos
        if (
            total_veiculos_relevantes == 39
            and total_s1 == 3
            and total_s2 == 25
            and total_s2_4x4 == 11
        ):
            print("\n   üéØ DADOS CORRETOS CONFIRMADOS!")
            print("   üìä Base principal atualizada com sucesso!")
        else:
            print("\n   ‚ö†Ô∏è  ATEN√á√ÉO: N√∫meros n√£o conferem com os esperados")
            print(f"   Esperado: 39 ve√≠culos (3 S1 + 25 S2 + 11 S2_4x4)")
            print(
                f"   Encontrado: {total_veiculos_relevantes} ve√≠culos ({total_s1} S1 + {total_s2} S2 + {total_s2_4x4} S2_4x4)"
            )

    except Exception as e:
        print(f"   ‚ùå Erro na verifica√ß√£o: {e}")
        return False

    print("\n‚úÖ ATUALIZA√á√ÉO DA BASE PRINCIPAL CONCLU√çDA!")
    return True


if __name__ == "__main__":
    sucesso = atualizar_base_principal()
    if sucesso:
        print("\nüîÑ Agora todos os scripts do sistema usar√£o os dados corretos!")
        print("üìà Dashboard e relat√≥rios ser√£o consistentes com a base original.")
    else:
        print("\n‚ùå Falha na atualiza√ß√£o. Verifique os logs acima.")
