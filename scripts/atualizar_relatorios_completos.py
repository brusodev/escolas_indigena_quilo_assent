#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Atualizar relat√≥rios Excel e PDF com dados mais recentes
"""

import pandas as pd
import json
import os
import subprocess
from datetime import datetime


def verificar_dados_atualizados():
    """Verifica se os dados est√£o atualizados com Haversine"""
    print("üîç VERIFICANDO DADOS PARA RELAT√ìRIOS")
    print("=" * 60)

    # Verificar arquivo Excel principal (agora com 63 escolas)
    excel_file = "dados/excel/distancias_escolas_diretorias_completo_63_corrigido.xlsx"
    if os.path.exists(excel_file):
        df = pd.read_excel(excel_file)
        print(f"‚úÖ Arquivo Excel: {excel_file}")
        print(f"üìä Total de escolas: {len(df)} (esperado: 63)")

        # Verificar KOPENOTI
        kopenoti = df[df["Nome_Escola"].str.contains("KOPENOTI", na=False, case=False)]
        if not kopenoti.empty:
            distancia = kopenoti.iloc[0]["Distancia_KM"]
            print(f"üéØ KOPENOTI: {distancia:.2f} km")

            if abs(distancia - 27.16) < 0.1:
                print("‚úÖ Dados com Haversine corretos")
                return True
            else:
                print("‚ùå Dados ainda incorretos")
                return False
        else:
            print("‚ùå KOPENOTI n√£o encontrado")
            return False
    else:
        print(f"‚ùå Arquivo n√£o encontrado: {excel_file}")
        return False


def verificar_dados_veiculos():
    """Verifica dados de ve√≠culos atualizados"""
    print("\nüöó VERIFICANDO DADOS DE VE√çCULOS")
    print("-" * 40)

    json_file = "dados/json/dados_veiculos_diretorias.json"
    if os.path.exists(json_file):
        with open(json_file, "r", encoding="utf-8") as f:
            data = json.load(f)

        print(f"‚úÖ Arquivo JSON: {json_file}")

        if "metadata" in data:
            metadata = data["metadata"]
            total_veiculos = metadata.get("total_veiculos", 0)
            print(f"üöó Total de ve√≠culos: {total_veiculos}")

            if total_veiculos == 172:
                print("‚úÖ Dados de ve√≠culos corretos")
                return True
            else:
                print("‚ùå Total de ve√≠culos incorreto")
                return False
        else:
            print("‚ùå Metadata n√£o encontrada")
            return False
    else:
        print(f"‚ùå Arquivo n√£o encontrado: {json_file}")
        return False


def gerar_relatorio_excel_atualizado():
    """Gera relat√≥rio Excel com dados atualizados"""
    print("\nüìä GERANDO RELAT√ìRIO EXCEL ATUALIZADO")
    print("-" * 50)

    try:
        # Executar script de Excel
        result = subprocess.run(
            ["python", "scripts/geracao/gerar_relatorio_excel.py"],
            capture_output=True,
            text=True,
            encoding="utf-8",
        )

        if result.returncode == 0:
            print("‚úÖ Relat√≥rio Excel gerado com sucesso")
            print(
                "üìÑ Output:", result.stdout.strip() if result.stdout else "Sem output"
            )
            return True
        else:
            print("‚ùå Erro ao gerar relat√≥rio Excel")
            print("üî• Erro:", result.stderr)
            return False

    except Exception as e:
        print(f"‚ùå Exce√ß√£o ao gerar Excel: {e}")
        return False


def gerar_relatorio_pdf_atualizado():
    """Gera relat√≥rio PDF com dados atualizados"""
    print("\nüìÑ GERANDO RELAT√ìRIO PDF ATUALIZADO")
    print("-" * 50)

    try:
        # Executar script de PDF melhorado
        result = subprocess.run(
            ["python", "scripts/geracao/gerar_relatorio_pdf_melhorado.py"],
            capture_output=True,
            text=True,
            encoding="utf-8",
        )

        if result.returncode == 0:
            print("‚úÖ Relat√≥rio PDF melhorado gerado com sucesso")
            print(
                "üìÑ Output:", result.stdout.strip() if result.stdout else "Sem output"
            )
            return True
        else:
            print("‚ùå Erro ao gerar relat√≥rio PDF")
            print("üî• Erro:", result.stderr)
            return False

    except Exception as e:
        print(f"‚ùå Exce√ß√£o ao gerar PDF: {e}")
        return False


def main():
    """Fun√ß√£o principal"""
    print("üöÄ ATUALIZANDO RELAT√ìRIOS COM DADOS HAVERSINE")
    print("=" * 70)
    print(f"üìÖ Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()

    # Verificar dados
    dados_ok = verificar_dados_atualizados()
    veiculos_ok = verificar_dados_veiculos()

    if not dados_ok:
        print("\n‚ùå ERRO: Dados de escolas n√£o est√£o atualizados")
        print("üí° Execute primeiro o script de corre√ß√£o de dist√¢ncias")
        return False

    if not veiculos_ok:
        print("\n‚ö†Ô∏è  AVISO: Dados de ve√≠culos podem estar desatualizados")
        print("üí° Continuando com os dados dispon√≠veis...")

    print("\nüîÑ INICIANDO GERA√á√ÉO DE RELAT√ìRIOS...")
    print("=" * 70)

    # Gerar relat√≥rios
    excel_ok = gerar_relatorio_excel_atualizado()
    pdf_ok = gerar_relatorio_pdf_atualizado()

    # Resumo final
    print("\nüéØ RESUMO FINAL")
    print("=" * 70)

    if excel_ok and pdf_ok:
        print("‚úÖ Todos os relat√≥rios gerados com sucesso!")
        print("üìä Excel: Dados Haversine atualizados")
        print("üìÑ PDF: Dist√¢ncias corrigidas (KOPENOTI: 27.16 km)")
        print("üöÄ Relat√≥rios prontos para uso!")
        return True
    else:
        print("‚ùå Alguns relat√≥rios falharam:")
        print(f"üìä Excel: {'‚úÖ OK' if excel_ok else '‚ùå FALHOU'}")
        print(f"üìÑ PDF: {'‚úÖ OK' if pdf_ok else '‚ùå FALHOU'}")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
