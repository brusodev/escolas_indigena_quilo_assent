#!/usr/bin/env python3
"""
Script para validar se os dados do dashboard est√£o corretos via servidor.
"""

import json
import os
import sys


def validar_dados_dashboard():
    """Valida se os dados JSON est√£o corretos e atualizados."""
    print("üîç VALIDA√á√ÉO DOS DADOS DO DASHBOARD")
    print("=" * 50)

    # Verificar arquivos JSON
    base_path = os.path.dirname(os.path.dirname(__file__))

    escolas_file = os.path.join(
        base_path, 'dados', 'json', 'dados_escolas_atualizados.json')
    veiculos_file = os.path.join(base_path, 'dados_veiculos_diretorias.json')

    print(f"üìÅ Caminho base: {base_path}")
    print(f"üìÑ Arquivo escolas: {escolas_file}")
    print(f"üìÑ Arquivo ve√≠culos: {veiculos_file}")
    print()

    # Verificar se os arquivos existem
    if not os.path.exists(escolas_file):
        print("‚ùå ERRO: Arquivo de escolas n√£o encontrado!")
        return False

    if not os.path.exists(veiculos_file):
        print("‚ùå ERRO: Arquivo de ve√≠culos n√£o encontrado!")
        return False

    try:
        # Carregar dados das escolas
        with open(escolas_file, 'r', encoding='utf-8') as f:
            dados_escolas = json.load(f)

        # Carregar dados dos ve√≠culos
        with open(veiculos_file, 'r', encoding='utf-8') as f:
            dados_veiculos = json.load(f)

        print("üìä ESTAT√çSTICAS DOS DADOS:")
        print("-" * 30)

        # Analisar escolas
        total_escolas = len(dados_escolas)
        escolas_indigenas = len(
            [e for e in dados_escolas if e.get('type') == 'indigena'])
        escolas_quilombolas = len(
            [e for e in dados_escolas if e.get('type') == 'quilombola'])

        print(f"üè´ Total de escolas: {total_escolas}")
        print(f"üè´ Escolas ind√≠genas: {escolas_indigenas}")
        print(f"üè´ Escolas quilombolas: {escolas_quilombolas}")
        print()

        # Analisar ve√≠culos
        if 'diretorias' in dados_veiculos:
            diretorias_data = dados_veiculos['diretorias']
            total_veiculos = dados_veiculos.get(
                'metadata', {}).get('total_veiculos', 0)
            veiculos_com_escolas = len(
                [d for d in diretorias_data if d.get('tem_escolas', False)])
        else:
            total_veiculos = len(dados_veiculos)
            veiculos_com_escolas = len(
                [v for v in dados_veiculos if v.get('tem_escolas', False)])

        print(f"üöå Total de ve√≠culos: {total_veiculos}")
        print(f"üöå Ve√≠culos em diretorias com escolas: {veiculos_com_escolas}")
        print()

        # Valida√ß√µes espec√≠ficas
        print("‚úÖ VALIDA√á√ïES:")
        print("-" * 15)

        # Validar total de escolas (deve ser 63)
        if total_escolas == 63:
            print(f"‚úÖ Total de escolas correto: {total_escolas}")
        else:
            print(
                f"‚ùå Total de escolas incorreto: {total_escolas} (esperado: 63)")

        # Validar ve√≠culos em diretorias com escolas (deve ser 39)
        if veiculos_com_escolas == 39:
            print(
                f"‚úÖ Ve√≠culos em diretorias com escolas correto: {veiculos_com_escolas}")
        else:
            print(
                f"‚ùå Ve√≠culos em diretorias com escolas incorreto: {veiculos_com_escolas} (esperado: 39)")

        # Validar estrutura dos dados
        escola_exemplo = dados_escolas[0] if dados_escolas else {}
        veiculo_exemplo = dados_veiculos[0] if dados_veiculos else {}

        campos_escolas_obrigatorios = [
            'name', 'type', 'lat', 'lng', 'diretoria']
        campos_veiculos_obrigatorios = [
            'nome', 'total_veiculos', 'tem_escolas']

        escolas_validas = all(
            campo in escola_exemplo for campo in campos_escolas_obrigatorios)
        veiculos_validos = all(
            campo in veiculo_exemplo for campo in campos_veiculos_obrigatorios)

        if escolas_validas:
            print("‚úÖ Estrutura das escolas v√°lida")
        else:
            print("‚ùå Estrutura das escolas inv√°lida")
            print(f"   Campos encontrados: {list(escola_exemplo.keys())}")
            print(f"   Campos obrigat√≥rios: {campos_escolas_obrigatorios}")

        if veiculos_validos:
            print("‚úÖ Estrutura dos ve√≠culos v√°lida")
        else:
            print("‚ùå Estrutura dos ve√≠culos inv√°lida")
            print(f"   Campos encontrados: {list(veiculo_exemplo.keys())}")
            print(f"   Campos obrigat√≥rios: {campos_veiculos_obrigatorios}")

        print()
        print("üéØ RESULTADO FINAL:")
        print("-" * 20)

        sucesso = (
            total_escolas == 63 and
            veiculos_com_escolas == 39 and
            escolas_validas and
            veiculos_validos
        )

        if sucesso:
            print("‚úÖ TODOS OS DADOS EST√ÉO CORRETOS!")
            print("‚úÖ O dashboard deve mostrar os dados atualizados via servidor.")
            return True
        else:
            print("‚ùå PROBLEMAS ENCONTRADOS NOS DADOS!")
            print("‚ùå Verifique os arquivos JSON e corrija os problemas.")
            return False

    except json.JSONDecodeError as e:
        print(f"‚ùå ERRO: Arquivo JSON inv√°lido - {e}")
        return False
    except Exception as e:
        print(f"‚ùå ERRO: {e}")
        return False


if __name__ == "__main__":
    sucesso = validar_dados_dashboard()
    sys.exit(0 if sucesso else 1)
