#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para regenerar todos os relat√≥rios com dados atualizados
"""

import pandas as pd
import json
from datetime import datetime
import subprocess
import os


def regenerar_relatorios_atualizados():
    """Regenera todos os relat√≥rios usando dados atualizados"""

    print("üîÑ REGENERANDO RELAT√ìRIOS COM DADOS ATUALIZADOS...")
    print("=" * 60)
    print(f"üìÖ Data/hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()

    # Verificar se arquivos de dados existem
    arquivos_necessarios = [
        "distancias_escolas_diretorias.xlsx",
        "QUANTIDADE DE VE√çCULOS LOCADOS - DIRETORIAS.xlsx",
        "GEP.xlsx",
        "dados_veiculos_atualizados.json",
        "dados_escolas_atualizados.json",
        "estatisticas_atualizadas.json",
    ]

    print("üìã Verificando arquivos necess√°rios...")
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            print(f"   ‚úÖ {arquivo}")
        else:
            print(f"   ‚ùå {arquivo} - AUSENTE")
            return False

    print("\nüéØ EXECUTANDO REGENERA√á√ÉO COMPLETA...")
    print("-" * 40)

    # 1. Relat√≥rio Excel Completo
    print("üìä 1/4: Gerando Relat√≥rio Excel Completo...")
    try:
        result = subprocess.run(
            [
                r"C:\Users\es.bruno.vargas\Desktop\escolas_indigina_quilo_assent\.venv\Scripts\python.exe",
                "gerar_relatorio_excel.py",
            ],
            capture_output=True,
            text=True,
            timeout=60,
        )

        if result.returncode == 0:
            print("   ‚úÖ Relat√≥rio Excel gerado com sucesso!")
        else:
            print(f"   ‚ö†Ô∏è  Aviso no Excel: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå Erro no Excel: {e}")

    # 2. Relat√≥rio PDF
    print("\nüìÑ 2/4: Gerando Relat√≥rio PDF...")
    try:
        result = subprocess.run(
            [
                r"C:\Users\es.bruno.vargas\Desktop\escolas_indigina_quilo_assent\.venv\Scripts\python.exe",
                "gerar_relatorio_pdf.py",
            ],
            capture_output=True,
            text=True,
            timeout=60,
        )

        if result.returncode == 0:
            print("   ‚úÖ Relat√≥rio PDF gerado com sucesso!")
        else:
            print(f"   ‚ö†Ô∏è  Aviso no PDF: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå Erro no PDF: {e}")

    # 3. An√°lise de Frota Integrada
    print("\nüöó 3/4: Gerando An√°lise de Frota Integrada...")
    try:
        result = subprocess.run(
            [
                r"C:\Users\es.bruno.vargas\Desktop\escolas_indigina_quilo_assent\.venv\Scripts\python.exe",
                "analise_frota_integrada.py",
            ],
            capture_output=True,
            text=True,
            timeout=60,
        )

        if result.returncode == 0:
            print("   ‚úÖ An√°lise de Frota gerada com sucesso!")
        else:
            print(f"   ‚ö†Ô∏è  Aviso na Frota: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå Erro na Frota: {e}")

    # 4. Gr√°ficos de An√°lise
    print("\nüìä 4/4: Gerando Gr√°ficos de An√°lise...")
    try:
        result = subprocess.run(
            [
                r"C:\Users\es.bruno.vargas\Desktop\escolas_indigina_quilo_assent\.venv\Scripts\python.exe",
                "gerar_graficos_frota.py",
            ],
            capture_output=True,
            text=True,
            timeout=60,
        )

        if result.returncode == 0:
            print("   ‚úÖ Gr√°ficos gerados com sucesso!")
        else:
            print(f"   ‚ö†Ô∏è  Aviso nos Gr√°ficos: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå Erro nos Gr√°ficos: {e}")

    # 5. Verificar arquivos gerados
    print("\nüìÅ VERIFICANDO ARQUIVOS GERADOS:")
    print("-" * 30)

    arquivos_saida = [
        ("Excel Completo", "Relatorio_Completo_Escolas_Diretorias.xlsx"),
        ("PDF Paisagem", "Relatorio_Paisagem_*.pdf"),
        ("An√°lise de Frota", "Analise_Integrada_Escolas_Frota_Supervisao.xlsx"),
        ("Gr√°ficos PNG", "Graficos_Analise_Frota.png"),
        ("Mapa de Calor", "Mapa_Calor_Necessidade_Veiculos.png"),
        ("Dashboard HTML", "distancias_escolas.html"),
    ]

    for desc, arquivo in arquivos_saida:
        if "*" in arquivo:
            # Listar arquivos com padr√£o
            import glob

            files = glob.glob(arquivo)
            if files:
                print(f"‚úÖ {desc}: {len(files)} arquivo(s)")
                for f in files[:2]:  # Mostrar at√© 2 arquivos
                    tamanho = os.path.getsize(f) / 1024
                    print(f"   üìÑ {f} ({tamanho:.1f} KB)")
            else:
                print(f"‚ùå {desc}: N√£o encontrado")
        else:
            if os.path.exists(arquivo):
                tamanho = os.path.getsize(arquivo) / 1024
                print(f"‚úÖ {desc}: {arquivo} ({tamanho:.1f} KB)")
            else:
                print(f"‚ùå {desc}: N√£o encontrado")

    # 6. Resumo das atualiza√ß√µes
    print("\nüìä RESUMO DAS ATUALIZA√á√ïES:")
    print("=" * 40)

    try:
        with open("estatisticas_atualizadas.json", "r", encoding="utf-8") as f:
            stats = json.load(f)

        print(f"üè´ Total de escolas: {stats['total_escolas']}")
        print(f"üî¥ Escolas ind√≠genas: {stats['escolas_indigenas']}")
        print(f"üü¢ Escolas quilombolas/assentamentos: {stats['escolas_quilombolas']}")
        print(f"üöó Total de ve√≠culos: {stats['total_veiculos']}")
        print(f"üìç Diretorias com ve√≠culos: {stats['diretorias_com_veiculos']}")
        print(f"‚ö†Ô∏è  Escolas alta prioridade: {stats['escolas_alta_prioridade']}")
        if stats["distancia_media"] > 0:
            print(f"üìè Dist√¢ncia m√©dia: {stats['distancia_media']} km")

    except Exception as e:
        print(f"Erro ao ler estat√≠sticas: {e}")

    # 7. Dados de supervis√£o GEP
    print(f"\nüë• SUPERVIS√ÉO GEP INTEGRADA:")
    try:
        with open("dados_supervisao_atualizados.json", "r", encoding="utf-8") as f:
            supervisao = json.load(f)

        print(f"   üìã {len(supervisao)} regi√µes de supervis√£o mapeadas")
        for regiao, dados in list(supervisao.items())[:3]:  # Mostrar 3 primeiras
            print(f"   üåç {regiao}: {dados['supervisor']}")

        if len(supervisao) > 3:
            print(f"   ... e mais {len(supervisao) - 3} regi√µes")

    except Exception as e:
        print(f"   ‚ö†Ô∏è Dados de supervis√£o n√£o dispon√≠veis: {e}")

    print(f"\n‚úÖ REGENERA√á√ÉO COMPLETA FINALIZADA!")
    print(f"üìÖ Conclu√≠do em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"\nüéØ Pr√≥ximas a√ß√µes sugeridas:")
    print(f"   1. Verificar dashboard HTML atualizado")
    print(f"   2. Revisar relat√≥rios Excel e PDF")
    print(f"   3. Analisar gr√°ficos de demanda de frota")
    print(f"   4. Confirmar integra√ß√£o dos dados GEP")

    return True


if __name__ == "__main__":
    success = regenerar_relatorios_atualizados()
    if not success:
        print("\n‚ùå Falha na regenera√ß√£o. Verifique os arquivos de entrada.")
        exit(1)
