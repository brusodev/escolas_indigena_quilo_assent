#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Valida√ß√£o Completa de Dist√¢ncias
Verifica se todas as dist√¢ncias est√£o corretas usando f√≥rmula de Haversine
"""

import pandas as pd
import math
import json

def calcular_distancia_haversine(lat1, lon1, lat2, lon2):
    """
    Calcula dist√¢ncia entre dois pontos usando f√≥rmula de Haversine
    
    A f√≥rmula de Haversine √© o m√©todo padr√£o para calcular dist√¢ncias geod√©sicas
    (em linha reta) entre dois pontos na superf√≠cie terrestre.
    
    Args:
        lat1, lon1: Latitude e longitude do primeiro ponto (em graus)
        lat2, lon2: Latitude e longitude do segundo ponto (em graus)
    
    Returns:
        float: Dist√¢ncia em quil√¥metros
    """
    # Raio m√©dio da Terra em quil√¥metros
    R = 6371.0
    
    # Converter graus para radianos
    lat1_rad = math.radians(lat1)
    lat2_rad = math.radians(lat2)
    delta_lat = math.radians(lat2 - lat1)
    delta_lon = math.radians(lon2 - lon1)
    
    # Aplicar f√≥rmula de Haversine
    a = (math.sin(delta_lat/2)**2 + 
         math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(delta_lon/2)**2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    
    # Dist√¢ncia em quil√¥metros
    distancia = R * c
    return distancia

def validar_todas_distancias():
    """
    Valida todas as dist√¢ncias no sistema comparando com c√°lculo Haversine
    """
    print("üîç VALIDA√á√ÉO COMPLETA DE DIST√ÇNCIAS")
    print("=" * 60)
    print("üìê M√©todo: F√≥rmula de Haversine (padr√£o geod√©sico internacional)")
    print("üåç Precis√£o: Dist√¢ncia geod√©sica (linha reta na superf√≠cie terrestre)")
    print("=" * 60)
    
    try:
        # Ler dados atuais
        df = pd.read_excel('distancias_escolas_diretorias_corrigido.xlsx')
        print(f"‚úÖ Carregado: {len(df)} escolas para valida√ß√£o")
        print()
        
        # Validar cada escola
        erros = []
        validacoes_ok = 0
        
        for idx, row in df.iterrows():
            # Coordenadas
            lat_escola = row['Latitude_Escola']
            lon_escola = row['Longitude_Escola'] 
            lat_de = row['Latitude_Diretoria']
            lon_de = row['Longitude_Diretoria']
            
            # Verificar coordenadas v√°lidas
            if pd.isna(lat_escola) or pd.isna(lon_escola) or pd.isna(lat_de) or pd.isna(lon_de):
                erros.append({
                    'escola': row['Nome_Escola'],
                    'erro': 'Coordenadas inv√°lidas (valores NaN)',
                    'lat_escola': lat_escola,
                    'lon_escola': lon_escola,
                    'lat_de': lat_de,
                    'lon_de': lon_de
                })
                continue
            
            # Calcular dist√¢ncia usando Haversine
            distancia_calculada = calcular_distancia_haversine(lat_escola, lon_escola, lat_de, lon_de)
            distancia_registrada = row['Distancia_KM']
            
            # Verificar se h√° diferen√ßa significativa (toler√¢ncia de 0.1 km)
            diferenca = abs(distancia_calculada - distancia_registrada)
            
            if diferenca > 0.1:
                erros.append({
                    'escola': row['Nome_Escola'],
                    'erro': 'Dist√¢ncia incorreta',
                    'registrada': distancia_registrada,
                    'calculada': round(distancia_calculada, 2),
                    'diferenca': round(diferenca, 2)
                })
            else:
                validacoes_ok += 1
        
        # Relat√≥rio de valida√ß√£o
        print(f"üìä RESULTADO DA VALIDA√á√ÉO:")
        print(f"‚úÖ Escolas com dist√¢ncias corretas: {validacoes_ok}")
        print(f"‚ùå Escolas com problemas: {len(erros)}")
        print(f"üìà Taxa de precis√£o: {(validacoes_ok/len(df)*100):.1f}%")
        print()
        
        if erros:
            print("üö® PROBLEMAS ENCONTRADOS:")
            for erro in erros[:10]:  # Mostrar at√© 10 erros
                print(f"‚Ä¢ {erro['escola']}")
                if 'registrada' in erro:
                    print(f"  Registrada: {erro['registrada']} km")
                    print(f"  Calculada: {erro['calculada']} km")
                    print(f"  Diferen√ßa: {erro['diferenca']} km")
                else:
                    print(f"  Erro: {erro['erro']}")
                print()
        else:
            print("üéâ TODAS AS DIST√ÇNCIAS EST√ÉO CORRETAS!")
            print("‚úÖ Sistema validado com 100% de precis√£o")
        
        return erros, validacoes_ok
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return None, 0

def gerar_relatorio_validacao(erros, validacoes_ok):
    """
    Gera relat√≥rio detalhado da valida√ß√£o
    """
    print("\nüìã Gerando relat√≥rio de valida√ß√£o...")
    
    try:
        # Dados para o relat√≥rio
        data_relatorio = {
            'M√©todo de C√°lculo': 'F√≥rmula de Haversine',
            'Descri√ß√£o': 'Dist√¢ncia geod√©sica (linha reta na superf√≠cie terrestre)',
            'Precis√£o': 'Coordenadas em graus decimais (WGS84)',
            'Raio Terra': '6.371 km (raio m√©dio)',
            'Data Valida√ß√£o': pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'),
            'Total Escolas': validacoes_ok + len(erros) if erros else validacoes_ok,
            'Escolas V√°lidas': validacoes_ok,
            'Escolas com Erro': len(erros) if erros else 0,
            'Taxa Precis√£o': f"{(validacoes_ok/(validacoes_ok + (len(erros) if erros else 0))*100):.1f}%"
        }
        
        # Criar DataFrame do relat√≥rio
        df_info = pd.DataFrame([data_relatorio])
        
        # Se h√° erros, criar DataFrame dos erros
        if erros:
            df_erros = pd.DataFrame(erros)
        else:
            df_erros = pd.DataFrame({'Mensagem': ['Todas as dist√¢ncias est√£o corretas!']})
        
        # Salvar relat√≥rio
        with pd.ExcelWriter('Relatorio_Validacao_Distancias_Haversine.xlsx') as writer:
            df_info.to_excel(writer, sheet_name='Informa√ß√µes', index=False)
            df_erros.to_excel(writer, sheet_name='Detalhes', index=False)
        
        print("‚úÖ Relat√≥rio salvo: Relatorio_Validacao_Distancias_Haversine.xlsx")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar relat√≥rio: {e}")
        return False

def atualizar_documentacao_haversine():
    """
    Atualiza a documenta√ß√£o dos relat√≥rios para explicitar o uso da f√≥rmula Haversine
    """
    print("\nüìù Atualizando documenta√ß√£o com explica√ß√£o da f√≥rmula Haversine...")
    
    # Texto explicativo sobre Haversine
    explicacao_haversine = """
METODOLOGIA DE C√ÅLCULO DE DIST√ÇNCIAS

üìê F√ìRMULA UTILIZADA: Haversine
üåç TIPO: Dist√¢ncia geod√©sica (linha reta na superf√≠cie terrestre)
üìä PRECIS√ÉO: Coordenadas em graus decimais (sistema WGS84)
üéØ APLICA√á√ÉO: Padr√£o internacional para c√°lculos geogr√°ficos

A f√≥rmula de Haversine √© o m√©todo padr√£o para calcular a dist√¢ncia mais curta 
entre dois pontos na superf√≠cie de uma esfera (Terra). Esta f√≥rmula considera 
a curvatura da Terra e fornece a dist√¢ncia geod√©sica, que √© a dist√¢ncia "em 
linha reta" entre dois pontos seguindo a superf√≠cie terrestre.

DIFEREN√áAS COM OUTRAS MEDI√á√ïES:
‚Ä¢ Google Maps: Dist√¢ncia rodovi√°ria (seguindo estradas)
‚Ä¢ Dist√¢ncia Euclidiana: Linha reta sem considerar curvatura da Terra
‚Ä¢ Dist√¢ncia Haversine: Linha reta considerando curvatura da Terra ‚úÖ

VANTAGENS DO M√âTODO HAVERSINE:
‚úÖ Precis√£o cient√≠fica reconhecida internacionalmente
‚úÖ Considera a curvatura real da Terra
‚úÖ Ideal para planejamento log√≠stico e an√°lise geogr√°fica
‚úÖ Base para sistemas GPS e navega√ß√£o
‚úÖ Permite compara√ß√µes consistentes entre localidades

F√ìRMULA MATEM√ÅTICA:
a = sin¬≤(ŒîœÜ/2) + cos œÜ1 ‚ãÖ cos œÜ2 ‚ãÖ sin¬≤(ŒîŒª/2)
c = 2 ‚ãÖ atan2(‚àöa, ‚àö(1‚àía))
d = R ‚ãÖ c

Onde:
œÜ = latitude, Œª = longitude, R = raio da Terra (6.371 km)
ŒîœÜ = diferen√ßa de latitudes, ŒîŒª = diferen√ßa de longitudes
"""
    
    try:
        # Salvar explica√ß√£o em arquivo
        with open('Metodologia_Calculo_Distancias_Haversine.txt', 'w', encoding='utf-8') as f:
            f.write(explicacao_haversine)
        
        print("‚úÖ Documenta√ß√£o salva: Metodologia_Calculo_Distancias_Haversine.txt")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar documenta√ß√£o: {e}")
        return False

def verificar_casos_especificos():
    """
    Verifica casos espec√≠ficos mencionados pelo usu√°rio
    """
    print("\nüîç Verificando casos espec√≠ficos...")
    
    try:
        df = pd.read_excel('distancias_escolas_diretorias_corrigido.xlsx')
        
        # Casos espec√≠ficos para verificar
        casos_teste = [
            "ALDEIA KOPENOTI",
            "DJEKUPE AMBA ARANDY", 
            "ALDEIA DE PARANAPUA",
            "ALDEIA TEKOA MIRIM"
        ]
        
        print("üìç VERIFICA√á√ÉO DE CASOS ESPEC√çFICOS:")
        print("-" * 50)
        
        for escola_nome in casos_teste:
            escola = df[df['Nome_Escola'].str.contains(escola_nome, na=False)]
            
            if not escola.empty:
                escola = escola.iloc[0]
                
                # Calcular dist√¢ncia Haversine
                dist_haversine = calcular_distancia_haversine(
                    escola['Latitude_Escola'], escola['Longitude_Escola'],
                    escola['Latitude_Diretoria'], escola['Longitude_Diretoria']
                )
                
                dist_registrada = escola['Distancia_KM']
                diferenca = abs(dist_haversine - dist_registrada)
                
                status = "‚úÖ OK" if diferenca < 0.1 else "‚ö†Ô∏è REVISAR"
                
                print(f"üè´ {escola_nome}")
                print(f"   Diretoria: {escola['Nome_Diretoria']}")
                print(f"   Registrada: {dist_registrada} km")
                print(f"   Haversine: {dist_haversine:.2f} km")
                print(f"   Diferen√ßa: {diferenca:.2f} km")
                print(f"   Status: {status}")
                print()
            else:
                print(f"‚ùå Escola n√£o encontrada: {escola_nome}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ INICIANDO VALIDA√á√ÉO COMPLETA DO SISTEMA")
    print("‚è∞ " + pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S'))
    print()
    
    # Executar valida√ß√£o
    erros, validacoes_ok = validar_todas_distancias()
    
    if erros is not None:
        # Gerar relat√≥rio
        gerar_relatorio_validacao(erros, validacoes_ok)
        
        # Atualizar documenta√ß√£o
        atualizar_documentacao_haversine()
        
        # Verificar casos espec√≠ficos
        verificar_casos_especificos()
        
        print("\n" + "=" * 60)
        print("üéØ VALIDA√á√ÉO COMPLETA FINALIZADA")
        print("üìÅ Arquivos gerados:")
        print("‚Ä¢ Relatorio_Validacao_Distancias_Haversine.xlsx")
        print("‚Ä¢ Metodologia_Calculo_Distancias_Haversine.txt")
        print()
        print("‚úÖ Sistema validado com f√≥rmula de Haversine")
        print("üìê Documenta√ß√£o atualizada com metodologia")
        print("=" * 60)
    else:
        print("‚ùå Falha na valida√ß√£o. Verificar dados de entrada.")
