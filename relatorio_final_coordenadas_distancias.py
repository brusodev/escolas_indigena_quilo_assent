#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Relat√≥rio Final - Implementa√ß√£o de Coordenadas e Dist√¢ncias
"""

import sys
import os

# Adicionar o diret√≥rio flask_sistema ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "flask_sistema"))

from app import create_app, db
from app.models.diretoria import Diretoria
from app.models.escola import Escola
from app.models.distancia import Distancia


def gerar_relatorio_completo():
    """Gera relat√≥rio completo da implementa√ß√£o"""
    print("üìã RELAT√ìRIO FINAL - COORDENADAS E DIST√ÇNCIAS IMPLEMENTADAS")
    print("=" * 70)
    print()

    app = create_app()
    with app.app_context():

        # 1. ESTAT√çSTICAS DAS DIRETORIAS
        print("üèõÔ∏è DIRETORIAS:")
        print("-" * 40)

        total_diretorias = Diretoria.query.count()
        com_coordenadas = Diretoria.query.filter(
            Diretoria.latitude.isnot(None), Diretoria.longitude.isnot(None)
        ).count()

        print(f"   Total de diretorias no banco: {total_diretorias}")
        print(f"   Diretorias com coordenadas: {com_coordenadas}")
        print(
            f"   Cobertura de coordenadas: {(com_coordenadas/total_diretorias)*100:.1f}%"
        )

        # Listar diretorias com coordenadas
        print(f"\n   ‚úÖ Diretorias com coordenadas ({com_coordenadas}):")
        diretorias_coordenadas = (
            Diretoria.query.filter(
                Diretoria.latitude.isnot(None), Diretoria.longitude.isnot(None)
            )
            .order_by(Diretoria.nome)
            .all()
        )

        for diretoria in diretorias_coordenadas:
            print(
                f"      ‚Ä¢ {diretoria.nome}: ({diretoria.latitude:.6f}, {diretoria.longitude:.6f})"
            )

        # 2. ESTAT√çSTICAS DAS ESCOLAS
        print(f"\nüè´ ESCOLAS:")
        print("-" * 40)

        total_escolas = Escola.query.count()
        escolas_com_coordenadas = Escola.query.filter(
            Escola.latitude.isnot(None), Escola.longitude.isnot(None)
        ).count()
        escolas_com_distancia = Escola.query.filter(
            Escola.distancia_diretoria.isnot(None)
        ).count()

        print(f"   Total de escolas: {total_escolas}")
        print(f"   Escolas com coordenadas: {escolas_com_coordenadas}")
        print(f"   Escolas com dist√¢ncia calculada: {escolas_com_distancia}")
        print(
            f"   Cobertura de dist√¢ncias: {(escolas_com_distancia/total_escolas)*100:.1f}%"
        )

        # Estat√≠sticas por tipo
        print(f"\n   üìä Por tipo de escola:")
        tipos = db.session.query(Escola.tipo).distinct().all()
        for (tipo,) in sorted(tipos):
            count_tipo = Escola.query.filter_by(tipo=tipo).count()
            com_distancia_tipo = Escola.query.filter(
                Escola.tipo == tipo, Escola.distancia_diretoria.isnot(None)
            ).count()
            print(
                f"      ‚Ä¢ {tipo}: {count_tipo} escolas, {com_distancia_tipo} com dist√¢ncia"
            )

        # 3. ESTAT√çSTICAS DA TABELA DIST√ÇNCIAS
        print(f"\nüìè TABELA DIST√ÇNCIAS:")
        print("-" * 40)

        total_distancias = Distancia.query.count()
        print(f"   Total de registros: {total_distancias}")

        # Estat√≠sticas de dist√¢ncias
        if total_distancias > 0:
            distancias_valores = [d.distancia_km for d in Distancia.query.all()]
            media = sum(distancias_valores) / len(distancias_valores)
            minima = min(distancias_valores)
            maxima = max(distancias_valores)

            print(f"   Dist√¢ncia m√≠nima: {minima:.2f} km")
            print(f"   Dist√¢ncia m√°xima: {maxima:.2f} km")
            print(f"   Dist√¢ncia m√©dia: {media:.2f} km")

        # 4. TOP MAIORES DIST√ÇNCIAS
        print(f"\nüéØ TOP 15 MAIORES DIST√ÇNCIAS:")
        print("-" * 40)

        maiores_distancias = (
            Escola.query.filter(Escola.distancia_diretoria.isnot(None))
            .order_by(Escola.distancia_diretoria.desc())
            .limit(15)
            .all()
        )

        for i, escola in enumerate(maiores_distancias, 1):
            diretoria = Diretoria.query.get(escola.diretoria_id)
            diretoria_nome = diretoria.nome if diretoria else "N/A"
            tipo_desc = escola.tipo.replace("_", " ").title()
            print(
                f"   {i:2d}. {escola.nome[:35]:<35} | {diretoria_nome:<18} | {tipo_desc:<12} | {escola.distancia_diretoria:6.2f} km"
            )

        # 5. AN√ÅLISE POR DIRETORIAS
        print(f"\nüó∫Ô∏è AN√ÅLISE POR DIRETORIAS COM COORDENADAS:")
        print("-" * 40)

        for diretoria in diretorias_coordenadas:
            escolas_diretoria = Escola.query.filter_by(
                diretoria_id=diretoria.id
            ).count()
            escolas_com_dist = Escola.query.filter(
                Escola.diretoria_id == diretoria.id,
                Escola.distancia_diretoria.isnot(None),
            ).count()

            if escolas_diretoria > 0:
                # Calcular dist√¢ncia m√©dia
                distancias_dir = [
                    e.distancia_diretoria
                    for e in Escola.query.filter(
                        Escola.diretoria_id == diretoria.id,
                        Escola.distancia_diretoria.isnot(None),
                    ).all()
                ]

                if distancias_dir:
                    media_dir = sum(distancias_dir) / len(distancias_dir)
                    max_dir = max(distancias_dir)
                    print(
                        f"   {diretoria.nome:<20} | {escolas_diretoria:3d} escolas | {escolas_com_dist:3d} c/ dist√¢ncia | M√©dia: {media_dir:5.2f} km | M√°x: {max_dir:5.2f} km"
                    )

        # 6. RESUMO T√âCNICO
        print(f"\n‚öôÔ∏è RESUMO T√âCNICO DA IMPLEMENTA√á√ÉO:")
        print("-" * 40)
        print(f"   ‚úÖ Coordenadas extra√≠das dos dados existentes das escolas")
        print(f"   ‚úÖ Tabela 'diretorias' atualizada com latitude/longitude")
        print(f"   ‚úÖ Campo 'distancia_diretoria' populado na tabela 'escolas'")
        print(f"   ‚úÖ Tabela 'distancias' criada com relacionamentos")
        print(f"   ‚úÖ F√≥rmula Haversine implementada para c√°lculos precisos")
        print(f"   ‚úÖ {com_coordenadas} diretorias com coordenadas completas")
        print(f"   ‚úÖ {escolas_com_distancia} escolas com dist√¢ncias calculadas")
        print(f"   ‚úÖ {total_distancias} registros na tabela de dist√¢ncias")

        print(f"\nüéØ OBJETIVOS ALCAN√áADOS:")
        print("-" * 40)
        print(f"   ‚úÖ Coordenadas das diretorias adicionadas ao banco")
        print(f"   ‚úÖ Coluna de dist√¢ncia implementada na tabela escolas")
        print(f"   ‚úÖ C√°lculos autom√°ticos de dist√¢ncia escola ‚Üí diretoria")
        print(f"   ‚úÖ Sistema pronto para an√°lises geogr√°ficas e log√≠sticas")
        print(f"   ‚úÖ Base para otimiza√ß√£o de rotas e aloca√ß√£o de recursos")

        print(f"\nüìä STATUS FINAL: ‚úÖ IMPLEMENTA√á√ÉO COMPLETA E FUNCIONAL")


def main():
    """Fun√ß√£o principal"""
    try:
        gerar_relatorio_completo()
        print(f"\n" + "=" * 70)
        print(f"üìà RELAT√ìRIO GERADO COM SUCESSO!")
        print(f"üí° O sistema agora possui coordenadas e dist√¢ncias implementadas")
        print(f"üöÄ Pronto para an√°lises avan√ßadas e otimiza√ß√µes log√≠sticas")

    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback

        traceback.print_exc()
        raise


if __name__ == "__main__":
    main()
